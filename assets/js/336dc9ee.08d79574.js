"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[445],{6158:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var n=r(4848),c=r(8453);const i={},s="Callback Registry",a={id:"interface/callback-registry",title:"Callback Registry",description:"The CallbackRegistry is an interface that may be implemented by different backends to provide concurrent access to",source:"@site/target/mdoc/interface/callback-registry.md",sourceDirName:"interface",slug:"/interface/callback-registry",permalink:"/prometheus4cats/docs/interface/callback-registry",draft:!1,unlisted:!1,editUrl:"https://github.com/permutive-engineering/prometheus4cats/edit/main/website/docs/interface/callback-registry.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Testing Registry",permalink:"/prometheus4cats/docs/implementations/testing"},next:{title:"Metrics DSL",permalink:"/prometheus4cats/docs/interface/dsl"}},o={},l=[{value:"Development Notes",id:"development-notes",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,c.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"callback-registry",children:"Callback Registry"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"CallbackRegistry"})," is an interface that may be implemented by different backends to provide concurrent access to\nmetric callbacks. This is not designed for use by users of the API directly, they should use it with the\n",(0,n.jsx)(t.a,{href:"/prometheus4cats/docs/interface/metric-factory",children:(0,n.jsx)(t.code,{children:"MetricFactory"})})," to create metrics using the ",(0,n.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl#metric-callbacks",children:"DSL"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"Either individual metrics or a collection of metrics may be registered as a callback. This allows you to inspect\nindividual values or import entire metric registries where needed."}),"\n",(0,n.jsx)(t.h2,{id:"development-notes",children:"Development Notes"}),"\n",(0,n.jsxs)(t.p,{children:["All methods on ",(0,n.jsx)(t.code,{children:"MetricRegistry"})," return a Cats-Effect ",(0,n.jsx)(t.code,{children:"Resource[F, Unit]"}),". This\nshould be used to register and un-register the callback with the underlying concurrent data structure. It should be\npossible to allow a callback to be registered for the same metric multiple times without throwing a runtime\nexception; therefore we recommend implementing some form of reference counting to track claims on each metric the\ncallback is providing."]})]})}function m(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>a});var n=r(6540);const c={},i=n.createContext(c);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);