"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[861],{2311:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>d});var i=r(4848),n=r(8453);const c={},s="Metric Registry",o={id:"interface/metric-registry",title:"Metric Registry",description:"The MetricRegistry is an interface that may be implemented by different backends to provide concurrent",source:"@site/target/mdoc/interface/metric-registry.md",sourceDirName:"interface",slug:"/interface/metric-registry",permalink:"/prometheus4cats/docs/interface/metric-registry",draft:!1,unlisted:!1,editUrl:"https://github.com/permutive-engineering/prometheus4cats/edit/main/website/docs/interface/metric-registry.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Metric Factory",permalink:"/prometheus4cats/docs/interface/metric-factory"},next:{title:"Primitive Metric Types",permalink:"/prometheus4cats/docs/metrics/primitive-metric-types"}},a={},d=[{value:"Development Notes",id:"development-notes",level:2}];function m(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"metric-registry",children:"Metric Registry"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"MetricRegistry"})," is an interface that may be implemented by different backends to provide concurrent\naccess to  metrics. This is not designed for use by users of the API directly, they should use it with the\n",(0,i.jsx)(t.a,{href:"/prometheus4cats/docs/interface/metric-factory",children:(0,i.jsx)(t.code,{children:"MetricFactory"})})," to create metrics using the ",(0,i.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl",children:"DSL"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"development-notes",children:"Development Notes"}),"\n",(0,i.jsxs)(t.p,{children:["All methods on ",(0,i.jsx)(t.code,{children:"MetricRegistry"})," return the desired ",(0,i.jsx)(t.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types",children:"primitive metric"})," contained in a Cats-Effect\n",(0,i.jsx)(t.code,{children:"Resource"}),". This should be used to register and un-register the metric with the underlying concurrent data structure.\nIt should be possible to allow the same metric to be requested multiple times without re-registering or throwing a\nruntime exception; therefore we recommend implementing some form of reference counting to track claims on each metric."]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>s,x:()=>o});var i=r(6540);const n={},c=i.createContext(n);function s(e){const t=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),i.createElement(c.Provider,{value:t},e.children)}}}]);