"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[941],{6341:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(4848),n=t(8453);const o={},c="Derived Metric Types",s={id:"metrics/derived-metric-types",title:"Derived Metric Types",description:"For more detailed information on building metrics see the Metrics DSL section.",source:"@site/target/mdoc/metrics/derived-metric-types.md",sourceDirName:"metrics",slug:"/metrics/derived-metric-types",permalink:"/prometheus4cats/docs/metrics/derived-metric-types",draft:!1,unlisted:!1,editUrl:"https://github.com/permutive-engineering/prometheus4cats/edit/main/website/docs/metrics/derived-metric-types.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Primitive Metric Types",permalink:"/prometheus4cats/docs/metrics/primitive-metric-types"}},a={},l=[{value:"<code>Timer</code>",id:"timer",level:2},{value:"Obtaining from a <code>Histogram</code>",id:"obtaining-from-a-histogram",level:3},{value:"Obtaining from a <code>Summary</code>",id:"obtaining-from-a-summary",level:3},{value:"Obtaining from a <code>Gauge</code>",id:"obtaining-from-a-gauge",level:3},{value:"<code>CurrentTimeRecorder</code>",id:"currenttimerecorder",level:2},{value:"Obtaining from a <code>Gauge</code>",id:"obtaining-from-a-gauge-1",level:3},{value:"<code>OutcomeRecorder</code>",id:"outcomerecorder",level:2},{value:"Obtaining from a <code>Counter</code>",id:"obtaining-from-a-counter",level:3},{value:"Obtaining from a <code>Gauge</code>",id:"obtaining-from-a-gauge-2",level:3}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"derived-metric-types",children:"Derived Metric Types"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsxs)(r.strong,{children:["For more detailed information on building metrics see the ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/interface/dsl",children:"Metrics DSL"})," section."]})}),"\n",(0,i.jsxs)(r.p,{children:["Derived metric types are types of metrics that add extra functionality to an underlying ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types",children:"primitive"})," metric."]}),"\n",(0,i.jsx)(r.p,{children:"These metrics exist for the following reasons:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Separation of concerns between recording a value and performing some additional higher level operation or side effect"}),"\n",(0,i.jsxs)(r.li,{children:["Making the addition of future ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/interface/metric-registry",children:(0,i.jsx)(r.code,{children:"MetricRegistry"})})," instances easier as higher level functionality isn't implemented by\nthe ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types",children:"primitive"})," metrics"]}),"\n",(0,i.jsx)(r.li,{children:"Provides a pattern for adding functionality that will not break binary compatibility"}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The examples in this section assume you have imported the following and have created a\n",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/interface/metric-factory",children:(0,i.jsx)(r.code,{children:"MetricFactory"})}),":"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:"import cats.effect._\nimport prometheus4cats._\n\nval factory: MetricFactory[IO] = MetricFactory.noop[IO]\n"})}),"\n",(0,i.jsx)(r.h2,{id:"timer",children:(0,i.jsx)(r.code,{children:"Timer"})}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(r.code,{children:"Timer"})," can be derived from either a ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#gauge",children:(0,i.jsx)(r.code,{children:"Gauge"})}),", ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#histogram",children:(0,i.jsx)(r.code,{children:"Histogram"})})," or [",(0,i.jsx)(r.code,{children:"Summary"}),"] that record ",(0,i.jsx)(r.code,{children:"Double"})," values. It uses\n",(0,i.jsx)(r.a,{href:"https://typelevel.org/cats-effect/api/3.x/cats/effect/kernel/Clock.html",children:(0,i.jsx)(r.code,{children:"Clock"})})," from ",(0,i.jsx)(r.a,{href:"https://typelevel.org/cats-effect/",children:"Cats-Effect"})," to time a given operation."]}),"\n",(0,i.jsxs)(r.p,{children:["The underlying metric type should be carefully considered; a ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#histogram",children:(0,i.jsx)(r.code,{children:"Histogram"})})," or [",(0,i.jsx)(r.code,{children:"Summary"}),"] can be used to measure many\noperations at differing runtime costs, where a ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#gauge",children:(0,i.jsx)(r.code,{children:"Gauge"})})," will only record the last value so is best for singular\noperations."]}),"\n",(0,i.jsxs)(r.h3,{id:"obtaining-from-a-histogram",children:["Obtaining from a ",(0,i.jsx)(r.code,{children:"Histogram"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val simpleTimerHistogram: Resource[IO, Timer.Aux[IO, Unit, Histogram]] = factory\n  .histogram("time")\n  .ofDouble\n  .help("Records the how long an opertation took")\n  .buckets(1.0, 2.0)\n  .asTimer\n  .build\n'})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val labelledTimerHistogram: Resource[IO, Timer.Aux[IO, String, Histogram]] = factory\n  .histogram("time")\n  .ofDouble\n  .help("Records the how long an opertation took")\n  .buckets(1.0, 2.0)\n  .label[String]("some_label")\n  .asTimer\n  .build\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"obtaining-from-a-summary",children:["Obtaining from a ",(0,i.jsx)(r.code,{children:"Summary"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val simpleTimerSummary: Resource[IO, Timer.Aux[IO, Unit, Summary]] = factory\n  .summary("time")\n  .ofDouble\n  .help("Records the how long an opertation took")\n  .asTimer\n  .build\n'})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val labelledTimerSummary: Resource[IO, Timer.Aux[IO, String, Summary]] = factory\n  .summary("time")\n  .ofDouble\n  .help("Records the how long an opertation took")\n  .label[String]("some_label")\n  .asTimer\n  .build\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"obtaining-from-a-gauge",children:["Obtaining from a ",(0,i.jsx)(r.code,{children:"Gauge"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val simpleTimerGauge: Resource[IO, Timer.Aux[IO, Unit, Gauge]] = factory\n  .gauge("time")\n  .ofDouble\n  .help("Records the how long an opertation took")\n  .asTimer\n  .build\n'})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val labelledTimerGauge: Resource[IO, Timer.Aux[IO, String, Gauge]] = factory\n  .gauge("time")\n  .ofDouble\n  .help("Records the how long an opertation took")\n  .label[String]("some_label")\n  .asTimer\n  .build\n'})}),"\n",(0,i.jsx)(r.h2,{id:"currenttimerecorder",children:(0,i.jsx)(r.code,{children:"CurrentTimeRecorder"})}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(r.code,{children:"CurrentTimeRecorder"})," can be derived from any ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#gauge",children:(0,i.jsx)(r.code,{children:"Gauge"})}),". It uses ",(0,i.jsx)(r.a,{href:"https://typelevel.org/cats-effect/api/3.x/cats/effect/kernel/Clock.html",children:(0,i.jsx)(r.code,{children:"Clock"})})," from ",(0,i.jsx)(r.a,{href:"https://typelevel.org/cats-effect/",children:"Cats-Effect"})," to get the current\nsystem time."]}),"\n",(0,i.jsxs)(r.h3,{id:"obtaining-from-a-gauge-1",children:["Obtaining from a ",(0,i.jsx)(r.code,{children:"Gauge"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val simpleCurrentTimeRecorderGauge: Resource[IO, CurrentTimeRecorder[IO, Unit]] = factory\n  .gauge("current_time")\n  .ofDouble\n  .help("Records the how long an opertation took")\n  .asCurrentTimeRecorder\n  .build\n'})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val labelledCurrentTimeRecorderGauge:\n  Resource[IO, CurrentTimeRecorder[IO, String]] =\n    factory\n      .gauge("current_time")\n      .ofDouble\n      .help("Records the how long an opertation took")\n      .label[String]("some_label")\n      .asCurrentTimeRecorder\n      .build\n'})}),"\n",(0,i.jsx)(r.h2,{id:"outcomerecorder",children:(0,i.jsx)(r.code,{children:"OutcomeRecorder"})}),"\n",(0,i.jsxs)(r.p,{children:["A ",(0,i.jsx)(r.code,{children:"Timer"})," can be derived from either a ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#counter",children:(0,i.jsx)(r.code,{children:"Counter"})})," or ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#gauge",children:(0,i.jsx)(r.code,{children:"Gauge"})}),". It uses ",(0,i.jsx)(r.a,{href:"https://typelevel.org/cats-effect/api/3.x/cats/effect/kernel/Outcome.html",children:(0,i.jsx)(r.code,{children:"Outcome"})})," from ",(0,i.jsx)(r.a,{href:"https://typelevel.org/cats-effect/",children:"Cats-Effect"})," to record the status\nof a given operation via a ",(0,i.jsx)(r.code,{children:"outcome_status"})," label, the value of which will either be ",(0,i.jsx)(r.code,{children:"succeeded"}),", ",(0,i.jsx)(r.code,{children:"canceled"})," or\n",(0,i.jsx)(r.code,{children:"errored"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["The underlying metric type should be carefully considered based on the behaviour covered below: a ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#counter",children:(0,i.jsx)(r.code,{children:"Counter"})})," can be used\nto measure repeated operations, where a ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#gauge",children:(0,i.jsx)(r.code,{children:"Gauge"})})," will only record the last value so is best for singular operations."]}),"\n",(0,i.jsxs)(r.p,{children:["When using a with a ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#counter",children:(0,i.jsx)(r.code,{children:"Counter"})}),", each ",(0,i.jsx)(r.a,{href:"https://typelevel.org/cats-effect/api/3.x/cats/effect/kernel/Outcome.html",children:(0,i.jsx)(r.code,{children:"Outcome"})})," will increment its corresponding label value, but when using a ",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types#gauge",children:(0,i.jsx)(r.code,{children:"Gauge"})}),"\nthe last invocation will set the corresponding label value to ",(0,i.jsx)(r.code,{children:"1"}),", with each of the other label values set to ",(0,i.jsx)(r.code,{children:"0"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["To help disambiguate the difference in behaviour the ",(0,i.jsx)(r.code,{children:"OutcomeRecorder"})," type will be tagged with the underlying\n",(0,i.jsx)(r.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types",children:"primitive"})," metric type. ",(0,i.jsxs)(r.strong,{children:["This is just a type alias and is not required when passing around instances of\n",(0,i.jsx)(r.code,{children:"OutcomeRecorder"})]}),"."]}),"\n",(0,i.jsxs)(r.h3,{id:"obtaining-from-a-counter",children:["Obtaining from a ",(0,i.jsx)(r.code,{children:"Counter"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val simpleOutcomeCounter: Resource[IO, OutcomeRecorder.Aux[IO, Long, Unit, Counter]] = factory\n  .counter("outcome_total")\n  .ofLong\n  .help("Records the outcome of some operation")\n  .asOutcomeRecorder\n  .build\n'})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val labelledOutcomeCounter:\n  Resource[IO, OutcomeRecorder.Aux[IO, Long, String, Counter]] = factory\n    .counter("outcome_total")\n    .ofLong\n    .help("Records the outcome of some operation")\n    .label[String]("some_label")\n    .asOutcomeRecorder\n    .build\n'})}),"\n",(0,i.jsxs)(r.h3,{id:"obtaining-from-a-gauge-2",children:["Obtaining from a ",(0,i.jsx)(r.code,{children:"Gauge"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val simpleOutcomeGauge: Resource[IO, OutcomeRecorder.Aux[IO, Long, Unit, Gauge]] = factory\n  .gauge("outcome")\n  .ofLong\n  .help("Records the outcome of some operation")\n  .asOutcomeRecorder\n  .build\n'})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-scala",children:'val labelledOutcomeGauge:\n  Resource[IO, OutcomeRecorder.Aux[IO, Long, String, Gauge]] = factory\n    .gauge("outcome")\n    .ofLong\n    .help("Records the outcome of some operation")\n    .label[String]("some_label")\n    .asOutcomeRecorder\n    .build\n'})})]})}function m(e={}){const{wrapper:r}={...(0,n.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>c,x:()=>s});var i=t(6540);const n={},o=i.createContext(n);function c(e){const r=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);