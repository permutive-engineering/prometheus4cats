"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[579],{1571:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var i=n(4848),s=n(8453);const r={},o="Testing Registry",c={id:"implementations/testing",title:"Testing Registry",description:"There exists a testing MetricRegistry implementation which allows you to check the value",source:"@site/target/mdoc/implementations/testing.md",sourceDirName:"implementations",slug:"/implementations/testing",permalink:"/prometheus4cats/docs/implementations/testing",draft:!1,unlisted:!1,editUrl:"https://github.com/permutive-engineering/prometheus4cats/edit/main/website/docs/implementations/testing.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Java Registry",permalink:"/prometheus4cats/docs/implementations/java"},next:{title:"Callback Registry",permalink:"/prometheus4cats/docs/interface/callback-registry"}},a={},l=[];function m(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"testing-registry",children:"Testing Registry"}),"\n",(0,i.jsxs)(t.p,{children:["There exists a testing ",(0,i.jsx)(t.code,{children:"MetricRegistry"})," implementation which allows you to check the value\nhistory of any created metrics. For ",(0,i.jsx)(t.code,{children:"Histogram"})," and ",(0,i.jsx)(t.code,{children:"Summary"})," this is a ",(0,i.jsx)(t.code,{children:"Chain"})," of all\nthe values that have been ",(0,i.jsx)(t.code,{children:"observe"}),"d for that metric. For ",(0,i.jsx)(t.code,{children:"Counter"})," and ",(0,i.jsx)(t.code,{children:"Gauge"})," this is\nthe history of the current value of the metric over time."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-scala",children:'import cats.syntax.all._\nimport cats.data.Chain\nimport cats.effect._\nimport prometheus4cats._\nimport prometheus4cats.testing._\n\nTestingMetricRegistry[IO].flatMap { reg =>\n  val factory = MetricFactory.builder.build(reg)\n  factory\n    .counter("counter_total")\n    .ofDouble\n    .help("Describe what this metric does")\n    .build\n    .use { counter =>\n      counter.inc >> counter.inc(2.0)\n        reg.counterHistory(\n          Counter.Name("counter_total"),\n          Metric.CommonLabels.empty\n        ).flatMap { hist =>\n          IO(hist === Some(Chain(0.0, 1.0, 3.0)))\n        }\n    }\n}\n'})})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var i=n(6540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);