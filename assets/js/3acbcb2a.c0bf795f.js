"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[372],{4671:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>o});var s=r(4848),i=r(8453);const c={},n="Java Registry",a={id:"implementations/java",title:"Java Registry",description:"The Java registry implements both [MetricRegistry] and [CallbackRegistry], wrapping the [Prometheus Java library].",source:"@site/target/mdoc/implementations/java.md",sourceDirName:"implementations",slug:"/implementations/java",permalink:"/prometheus4cats/docs/implementations/java",draft:!1,unlisted:!1,editUrl:"https://github.com/permutive-engineering/prometheus4cats/edit/main/website/docs/implementations/java.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Design",permalink:"/prometheus4cats/docs/design"},next:{title:"Testing Registry",permalink:"/prometheus4cats/docs/implementations/testing"}},l={},o=[{value:"Built-in Metrics",id:"built-in-metrics",level:2},{value:"Implementation Notes",id:"implementation-notes",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"java-registry",children:"Java Registry"}),"\n",(0,s.jsxs)(t.p,{children:["The Java registry implements both ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/metric-registry",children:(0,s.jsx)(t.code,{children:"MetricRegistry"})})," and ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/callback-registry",children:(0,s.jsx)(t.code,{children:"CallbackRegistry"})}),", wrapping the ",(0,s.jsx)(t.a,{href:"https://github.com/prometheus/client_java/",children:"Prometheus Java library"}),".\nThis provides interoperability with anything that depends on the Java library."]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u2139\ufe0f As of version ",(0,s.jsx)(t.code,{children:"1.1.0"})," of Prometheus4Cats, the Java registry now supports ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/exemplar",children:"Exemplars"})]}),"\n"]}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsxs)(t.p,{children:["\u2139\ufe0f The Java Registry does add a runtime constraint that go beyond constraints that Prometheus itself imposes:\nYou cannot have two metrics of the same name with different labels.\n",(0,s.jsx)(t.a,{href:"https://github.com/prometheus/client_java/issues/696",children:"This issue"})," describes the problem."]}),"\n",(0,s.jsxs)(t.p,{children:["We have actually worked around this issue for callbacks, where metrics and metric collections ",(0,s.jsx)(t.strong,{children:"can"})," have the same\nmetric name with different labels, which is fine for Prometheus to scrape."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"See the example below on how to use the Java Registry:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-scala",children:"import cats.effect.IO\nimport cats.effect.Resource\n\nimport io.prometheus.client.CollectorRegistry\n\nimport org.typelevel.log4cats.Logger\nimport org.typelevel.log4cats.noop.NoOpLogger\n\nimport prometheus4cats.MetricFactory\nimport prometheus4cats.javasimpleclient.JavaMetricRegistry\n\n// a logger is required to construct the Java registry\nimplicit val logger: Logger[IO] = NoOpLogger.impl[IO] \n\n// Construct a Java regisitry using the default collector registry\nval default: Resource[IO, JavaMetricRegistry[IO]] =\n  JavaMetricRegistry.Builder().build[IO]\n\n// Construct a Java registry using a custom collector registry\nval custom: Resource[IO, JavaMetricRegistry[IO]] =\n  JavaMetricRegistry.Builder().withRegistry(new CollectorRegistry()).build[IO]\n\n// Use the registry to get a factory\nval factory: Resource[IO, MetricFactory.WithCallbacks[IO]] =\n  custom.map(MetricFactory.builder.build(_))\n"})}),"\n",(0,s.jsx)(t.h2,{id:"built-in-metrics",children:"Built-in Metrics"}),"\n",(0,s.jsx)(t.p,{children:"The Java registry provides some metrics related to its internals, these can used when investigating a callback that may\nnot be functioning probably:"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Metric Name"}),(0,s.jsx)(t.th,{children:"Metric Type"}),(0,s.jsx)(t.th,{children:"Labels"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_registered_metrics"})}),(0,s.jsx)(t.td,{children:"Gauge"}),(0,s.jsx)(t.td,{}),(0,s.jsxs)(t.td,{children:["Number of ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/metrics/primitive-metric-types",children:"metrics"})," registered in the Prometheus Java registry by Prometheus4Cats"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_registered_metric_claims"})}),(0,s.jsx)(t.td,{children:"Gauge"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"metric_name"}),", ",(0,s.jsx)(t.code,{children:"metric_type"})]}),(0,s.jsxs)(t.td,{children:["Number of claims on each metric registered in the Prometheus Java registry by Prometheus4Cats; i.e. how many ",(0,s.jsx)(t.a,{href:"#implementation-notes",children:"references"})," there are for each metric"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_registered_callback_metrics"})}),(0,s.jsx)(t.td,{children:"Gauge"}),(0,s.jsx)(t.td,{}),(0,s.jsxs)(t.td,{children:["Number of ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl#metric-callbacks",children:"callback"})," metrics registered in the Prometheus Java registry by Prometheus4Cats"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_registered_callbacks_per_metric"})}),(0,s.jsx)(t.td,{children:"Gauge"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"metric_name"}),", ",(0,s.jsx)(t.code,{children:"metric_type"})]}),(0,s.jsxs)(t.td,{children:["Number of callbacks per metric ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl#metric-callbacks",children:"callback"})," registered with the Prometheus4Cats Java registry. Multiple callbacks may be registered per metric name."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_combined_callback_metric_total"})}),(0,s.jsx)(t.td,{children:"Counter"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"metric_name"}),", ",(0,s.jsx)(t.code,{children:"status"})]}),(0,s.jsx)(t.td,{children:"Number of times all callbacks for a metric have been executed, with a status (success, error, timeout)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_callback_total"})}),(0,s.jsx)(t.td,{children:"Counter"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"metric_name"}),", ",(0,s.jsx)(t.code,{children:"status"})]}),(0,s.jsx)(t.td,{children:"Number of times each metric callback has been executed, with a status (success, error, timeout)"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_collection_callback_duplicates"})}),(0,s.jsx)(t.td,{children:"Gauge"}),(0,s.jsxs)(t.td,{children:[(0,s.jsx)(t.code,{children:"duplicate_type"}),",  ",(0,s.jsx)(t.code,{children:"metric_prefix"})]}),(0,s.jsxs)(t.td,{children:["Duplicate metrics with different types detected in ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl#metric-collection",children:"metric collection"}),"s callbacks"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_collection_callback_duration"})}),(0,s.jsx)(t.td,{children:"Histogram"}),(0,s.jsx)(t.td,{}),(0,s.jsxs)(t.td,{children:["Time it takes to run all ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl#metric-collection",children:"metric collection"})," callbacks"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_combined_collection_callback_total"})}),(0,s.jsx)(t.td,{children:"Counter"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status"})}),(0,s.jsxs)(t.td,{children:["Number of times all of the ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl#metric-collection",children:"metric collection"})," callbacks have been executed, with a status (success, error, timeout)"]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"prometheus4cats_collection_callback_total"})}),(0,s.jsx)(t.td,{children:"Counter"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"status"})}),(0,s.jsxs)(t.td,{children:["Number of times a ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl#metric-collection",children:"metric collection"})," callback has been executed, with a status (success, error, timeout)"]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,s.jsxs)(t.p,{children:["As per the ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/metric-registry",children:(0,s.jsx)(t.code,{children:"MetricRegistry"})})," and ",(0,s.jsx)(t.a,{href:"/prometheus4cats/docs/interface/callback-registry",children:(0,s.jsx)(t.code,{children:"CallbackRegistry"})})," interface, this implementation returns Cats-Effect ",(0,s.jsx)(t.code,{children:"Resource"}),"s\nto indicate a metric being registered and ultimately de-registered. Requesting a metric of the same name (and labels)\nmultiple times ",(0,s.jsx)(t.strong,{children:"will not"})," result in an error, instead you will be returned the currently registered metric. The Java\nregistry wrapper implements reference counting to ensure that a metric or callback will only be de-registered when there\nare no more references to it or when the wrapper's surrounding ",(0,s.jsx)(t.code,{children:"Resource"})," is finalized."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>a});var s=r(6540);const i={},c=s.createContext(i);function n(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);