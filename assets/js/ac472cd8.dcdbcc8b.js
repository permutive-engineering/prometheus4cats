"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[45],{8540:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>n,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var c=r(4848),a=r(8453);const i={},n="Metric Factory",s={id:"interface/metric-factory",title:"Metric Factory",description:"The MetricFactory creates an entrypoint to the Metric DSL from an instance of",source:"@site/target/mdoc/interface/metric-factory.md",sourceDirName:"interface",slug:"/interface/metric-factory",permalink:"/prometheus4cats/docs/interface/metric-factory",draft:!1,unlisted:!1,editUrl:"https://github.com/permutive-engineering/prometheus4cats/edit/main/website/docs/interface/metric-factory.md",tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Exemplar",permalink:"/prometheus4cats/docs/interface/exemplar"},next:{title:"Metric Registry",permalink:"/prometheus4cats/docs/interface/metric-registry"}},o={},l=[{value:"<code>MetricFactory</code> or <code>MetricFactory.WithCallbacks</code>",id:"metricfactory-or-metricfactorywithcallbacks",level:2},{value:"Constructing a No-op <code>MetricFactory</code>",id:"constructing-a-no-op-metricfactory",level:2},{value:"Constructing from a <code>MetricRegistry</code>",id:"constructing-from-a-metricregistry",level:2},{value:"Constructing from a <code>CallbackRegistry</code>",id:"constructing-from-a-callbackregistry",level:2},{value:"Changing a <code>MetricFactory</code>",id:"changing-a-metricfactory",level:2},{value:"Transforming the Effect Type (<code>mapK</code>)",id:"transforming-the-effect-type-mapk",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.h1,{id:"metric-factory",children:"Metric Factory"}),"\n",(0,c.jsxs)(t.p,{children:["The ",(0,c.jsx)(t.code,{children:"MetricFactory"})," creates an entrypoint to the ",(0,c.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl",children:"Metric DSL"})," from an instance of\n",(0,c.jsx)(t.a,{href:"/prometheus4cats/docs/interface/metric-registry",children:(0,c.jsx)(t.code,{children:"MetricRegistry"})}),", with the option of also creating from a ",(0,c.jsx)(t.a,{href:"/prometheus4cats/docs/interface/callback-registry",children:(0,c.jsx)(t.code,{children:"CallbackRegistry"})}),"."]}),"\n",(0,c.jsxs)(t.p,{children:["The following examples assume that you have the following imports in scope and that you have constructed a\n",(0,c.jsx)(t.a,{href:"/prometheus4cats/docs/interface/metric-registry",children:(0,c.jsx)(t.code,{children:"MetricRegistry"})})," and ",(0,c.jsx)(t.a,{href:"/prometheus4cats/docs/interface/callback-registry",children:(0,c.jsx)(t.code,{children:"CallbackRegistry"})}),"."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"import cats.effect._\nimport prometheus4cats._\n\nval metricRegistry: MetricRegistry[IO] = MetricRegistry.noop[IO]\nval callbackRegistry: CallbackRegistry[IO] = CallbackRegistry.noop[IO]\nval registry: MetricRegistry[IO] with CallbackRegistry[IO] = null\n"})}),"\n",(0,c.jsxs)(t.h2,{id:"metricfactory-or-metricfactorywithcallbacks",children:[(0,c.jsx)(t.code,{children:"MetricFactory"})," or ",(0,c.jsx)(t.code,{children:"MetricFactory.WithCallbacks"})]}),"\n",(0,c.jsxs)(t.p,{children:["There are two variants of Metric Factory: ",(0,c.jsx)(t.code,{children:"MetricFactory"})," and ",(0,c.jsx)(t.code,{children:"MetricFactory.WithCallbacks"}),", the latter extending and\nproviding the same functionality as the former but with the ability to pass ",(0,c.jsx)(t.a,{href:"/prometheus4cats/docs/interface/dsl#metric-callbacks",children:"callbacks"})," to the\nDSL."]}),"\n",(0,c.jsxs)(t.p,{children:["Whether you are able to obtain a ",(0,c.jsx)(t.code,{children:"MetricFactory.WithCallbacks"})," depends on two things:"]}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsxs)(t.li,{children:["Whether you have an implementation ",(0,c.jsx)(t.a,{href:"/prometheus4cats/docs/interface/callback-registry",children:(0,c.jsx)(t.code,{children:"CallbackRegistry"})})," available"]}),"\n",(0,c.jsx)(t.li,{children:(0,c.jsxs)(t.a,{href:"#transforming-the-effect-type-mapk",children:["How you may have transformed the effect type of ",(0,c.jsx)(t.code,{children:"MetricsFactory.WithCallbacks"})]})}),"\n"]}),"\n",(0,c.jsxs)(t.h2,{id:"constructing-a-no-op-metricfactory",children:["Constructing a No-op ",(0,c.jsx)(t.code,{children:"MetricFactory"})]}),"\n",(0,c.jsxs)(t.p,{children:["For testing purposes it is possible to construct a ",(0,c.jsx)(t.code,{children:"MetricFactory"})," that create metrics who perform no operations."]}),"\n",(0,c.jsx)(t.p,{children:"To obtain a no-op instance use the snippet below:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"MetricFactory.noop[IO]\n"})}),"\n",(0,c.jsxs)(t.p,{children:["A no-op ",(0,c.jsx)(t.code,{children:"MetricsFactory.WithCallabacks"})," can be obtained via either of the methods shown below:"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"MetricFactory.WithCallbacks.noop[IO]\nMetricFactory.builder.noop[IO]\n"})}),"\n",(0,c.jsxs)(t.h2,{id:"constructing-from-a-metricregistry",children:["Constructing from a ",(0,c.jsx)(t.code,{children:"MetricRegistry"})]}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"MetricRegistry"})," provides a builder with a fluent API that allows you to create an instance that adds an optional\nprefix and/or common label set to all metrics."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"MetricFactory\n  .builder\n  .build(metricRegistry)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["Literal prefixes are checked at compile time to ensure they conform to the ",(0,c.jsx)(t.a,{href:"https://github.com/OpenObservability/OpenMetrics",children:"OpenMetrics"})," format. Alternatively you may\nprovide an instance of ",(0,c.jsx)(t.code,{children:"Metric.Prefix"})," that has been refined at runtime."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'MetricFactory\n  .builder\n  .withPrefix("app_name")\n  .build(metricRegistry)\n'})}),"\n",(0,c.jsxs)(t.p,{children:["Common labels are a set of labels that are checked at runtime so that the label names conform to the ",(0,c.jsx)(t.a,{href:"https://github.com/OpenObservability/OpenMetrics",children:"OpenMetrics"})]}),"\n",(0,c.jsx)(t.p,{children:"format and no more than ten are defined at any one time, which helps to reduce cardinality."}),"\n",(0,c.jsx)(t.p,{children:"There is no compile time checking of these labels as it is assumed they will come from the runtime environment."}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'val commonLabels: Either[String, Metric.CommonLabels] =\n  Metric.CommonLabels.ofStrings("name" -> "value")\n\ncommonLabels.map { labels =>\n  MetricFactory\n    .builder\n    .withCommonLabels(labels)\n    .build(metricRegistry)\n}\n'})}),"\n",(0,c.jsxs)(t.h2,{id:"constructing-from-a-callbackregistry",children:["Constructing from a ",(0,c.jsx)(t.code,{children:"CallbackRegistry"})]}),"\n",(0,c.jsxs)(t.p,{children:["To construct with a ",(0,c.jsx)(t.code,{children:"CallbackRegistry"})," you also need a ",(0,c.jsx)(t.code,{children:"MetricRegistry"}),", these may be separate or the same class."]}),"\n",(0,c.jsxs)(t.p,{children:["The same builder is used as above, but the type of metrics factory built will be a ",(0,c.jsx)(t.code,{children:"MetricsFactory.WithCallbacks"})," if\nyou provide a ",(0,c.jsx)(t.code,{children:"CallbackRegistry"}),":"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"MetricFactory\n  .builder\n  .build(metricRegistry, callbackRegistry)\n"})}),"\n",(0,c.jsx)(t.p,{children:"Alternatively:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"MetricFactory\n  .builder\n  .build(registry)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["As above, you may add ",(0,c.jsx)(t.code,{children:"CommonLabels"})," and a ",(0,c.jsx)(t.code,{children:"Prefix"})," as you see fit."]}),"\n",(0,c.jsxs)(t.h2,{id:"changing-a-metricfactory",children:["Changing a ",(0,c.jsx)(t.code,{children:"MetricFactory"})]}),"\n",(0,c.jsxs)(t.p,{children:["It is possible to obtain a new instance of a ",(0,c.jsx)(t.code,{children:"MetricFactory"})," from an existing one with a different/no prefix or\ncommon labels."]}),"\n",(0,c.jsxs)(t.p,{children:["The snippet below showcases all the syntax for modifying ",(0,c.jsx)(t.code,{children:"MetricFactory"}),":"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:'val newCommonLabels: Either[String, Metric.CommonLabels] =\n  Metric.CommonLabels.ofStrings("name2" -> "value2")\n\nnewCommonLabels.map { labels =>\n  MetricFactory\n    .builder\n    .build(metricRegistry)\n    .dropPrefix\n    .withPrefix("different_prefix")\n    .dropCommonLabels\n    .withCommonLabels(labels)\n}\n'})}),"\n",(0,c.jsxs)(t.h2,{id:"transforming-the-effect-type-mapk",children:["Transforming the Effect Type (",(0,c.jsx)(t.code,{children:"mapK"}),")"]}),"\n",(0,c.jsxs)(t.p,{children:["You may transform the effect type (",(0,c.jsx)(t.code,{children:"F"}),") of a ",(0,c.jsx)(t.code,{children:"MetricsFactory"})," with a\n",(0,c.jsx)(t.a,{href:"https://typelevel.org/cats/datatypes/functionk.html",children:"Cats natural transformation"})," (",(0,c.jsx)(t.code,{children:"~>"}),")."]}),"\n",(0,c.jsxs)(t.p,{children:[(0,c.jsx)(t.code,{children:"MetricsFactory"})," provides a ",(0,c.jsx)(t.code,{children:"mapK"})," method to do this, while ",(0,c.jsx)(t.code,{children:"MetricsFactory.WithCallbacks"})," provides an ",(0,c.jsx)(t.code,{children:"imapK"})," method,\n",(0,c.jsx)(t.code,{children:"mapK"})," is also available on ",(0,c.jsx)(t.code,{children:"MetricsFactory.WithCallbacks"})," as it extends ",(0,c.jsx)(t.code,{children:"MetricsFactory"}),", but you will only ever get a\n",(0,c.jsx)(t.code,{children:"MetricsFactory"})," when calling ",(0,c.jsx)(t.code,{children:"mapK"}),", whereas ",(0,c.jsx)(t.code,{children:"imapK"})," will yield ",(0,c.jsx)(t.code,{children:"MetricsFactory.WithCallbacks"}),". This is due to the\nnature of a callback needing to be run in the original effect to retrieve the metric value."]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"import cats.~>\nimport cats.data.EitherT\n\ntype F[A] = IO[A]\ntype G[A] = EitherT[IO, Throwable, A]\n\nval fk: F ~> G = EitherT.liftK[F, Throwable]\n\nval gk: G ~> F = new (G ~> F) {\n  def apply[A](fa: G[A]): F[A] = fa.rethrowT\n}\n\nval factoryWithCallbacksF = MetricFactory.builder.build(metricRegistry, callbackRegistry)\n\nval factoryG = factoryWithCallbacksF.mapK(fk)\n\nval factoryWithCallbacksG = factoryWithCallbacksF.imapK(fk, gk)\n"})}),"\n",(0,c.jsxs)(t.p,{children:["It is also possible to construct a ",(0,c.jsx)(t.code,{children:"MetricsFactory.WithCallbacks"})," from a ",(0,c.jsx)(t.code,{children:"MetricsFactory"})," and ",(0,c.jsx)(t.a,{href:"/prometheus4cats/docs/interface/callback-registry",children:(0,c.jsx)(t.code,{children:"CallbackRegistry"})}),":"]}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-scala",children:"val callbackRegistryG: CallbackRegistry[G] = CallbackRegistry.noop[G]\n\nMetricFactory.builder.build(factoryG, callbackRegistryG)\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>n,x:()=>s});var c=r(6540);const a={},i=c.createContext(a);function n(e){const t=c.useContext(i);return c.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:n(e.components),c.createElement(i.Provider,{value:t},e.children)}}}]);